#************************************************************************
#*   IRC - Internet Relay Chat, Makefile
#*   Copyright (C) 1990, Jarkko Oikarinen
#*
#*   This program is free software; you can redistribute it and/or modify
#*   it under the terms of the GNU General Public License as published by
#*   the Free Software Foundation; either version 1, or (at your option)
#*   any later version.
#*
#*   This program is distributed in the hope that it will be useful,
#*   but WITHOUT ANY WARRANTY; without even the implied warranty of
#*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#*   GNU General Public License for more details.
#*
#*   You should have received a copy of the GNU General Public License
#*   along with this program; if not, write to the Free Software
#*   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#*
#*   $Id: Makefile.in,v 7.52 2003/05/15 07:17:15 joshk Exp $
#*/

RM=@RM@
CLOBBER=@CLOBBER@
prefix=@prefix@
exec_prefix=@exec_prefix@

# Default make flags - you may want to uncomment this on a multicpu machine
#MFLAGS   = -j 4
SUBDIRS   = modules src tools doc include servlink etc
CLEANDIRS = ${SUBDIRS} contrib

# The make used HAS to set $(MAKE). But then, if we don't do it this
# way, people lose the option to use a 'make' called something other 
# than `make.' If it doesn't set $(MAKE), fall back to the old behavior
# by substing SET_MAKE.

@SET_MAKE@

MAKE := $(MAKE) ${MFLAGS} 

all:	build

build: include/setup.h
	@for i in $(SUBDIRS); do \
		echo "build ==> $$i";\
		cd $$i;\
		${MAKE} build || exit; cd ..;\
	done

clean:
	${RM} -f *~ core rsa_respond.tar rsa_respond.tar.gz
	@for i in $(CLEANDIRS); do \
		echo "clean ==> $$i";\
		cd $$i;\
		${MAKE} clean; cd ..;\
	done
	-@if [ -f include/setup.h ] ; then \
		echo "To really restart installation, ${MAKE} distclean" ; \
	fi

distclean:
	${RM} -f Makefile *~ *.rej *.orig core ircd.core
	${RM} -f config.status config.cache config.log
	cd include; ${RM} -f setup.h *~ *.rej *.orig ; cd ..
	@for i in $(CLEANDIRS); do \
		echo "distclean ==> $$i";\
		cd $$i;\
		${MAKE} distclean; cd ..;\
	done

depend:
	@for i in $(SUBDIRS); do \
		echo "depend ==> $$i";\
		cd $$i;\
		${MAKE} depend; cd ..;\
	done

install: all
	@for i in $(SUBDIRS); do \
		echo "install ==> $$i";\
		cd $$i;\
		${MAKE} install; \
		cd ..; \
	done

include/setup.h:
	sh configure

# A la Linux kernel config :)
dep: depend
