diff -ur nohalfops/contrib/m_clearchan.c halfops/contrib/m_clearchan.c
--- nohalfops/contrib/m_clearchan.c	Sun Aug  1 22:38:55 2004
+++ halfops/contrib/m_clearchan.c	Sun Aug  1 22:39:01 2004
@@ -197,6 +197,7 @@
 remove_our_modes(struct Channel *chptr, struct Client *source_p)
 {
   remove_a_mode(chptr, CHFL_CHANOP, 'o');
+  remove_a_mode(chptr, CHFL_HALFOP, 'h');
   remove_a_mode(chptr, CHFL_VOICE, 'v');
 
   /* Clear all +beI modes */
diff -ur nohalfops/contrib/m_force.c halfops/contrib/m_force.c
--- nohalfops/contrib/m_force.c	Sun Aug  1 22:38:55 2004
+++ halfops/contrib/m_force.c	Sun Aug  1 22:39:01 2004
@@ -133,6 +133,12 @@
       sjmode = '+';
       parv[2]++;
       break;
+    case '%':
+      type = CHFL_HALFOP;
+      mode = 'h';
+      sjmode = '%';
+      parv[2]++;
+      break;
     default:
       type = 0;
       mode = sjmode = '\0'; /* make sure sjmode is 0. sjoin depends on it */
diff -ur nohalfops/contrib/m_ojoin.c halfops/contrib/m_ojoin.c
--- nohalfops/contrib/m_ojoin.c	Sun Aug  1 22:38:55 2004
+++ halfops/contrib/m_ojoin.c	Sun Aug  1 22:39:01 2004
@@ -103,6 +103,8 @@
                 modeletter = 'o'; name++; break;
       case '+': tmp_flags = CHFL_VOICE;
                 modeletter = 'v'; name++; break;
+      case '%': tmp_flags = CHFL_HALFOP;
+                modeletter = 'h'; name++; break;
       case '#':
       case '&':
         tmp_flags = 0;
diff -ur nohalfops/include/channel_mode.h halfops/include/channel_mode.h
--- nohalfops/include/channel_mode.h	Sun Aug  1 22:38:53 2004
+++ halfops/include/channel_mode.h	Sun Aug  1 22:39:01 2004
@@ -53,11 +53,12 @@
 
 /* Channel related flags */
 #define CHFL_CHANOP     0x0001 /* Channel operator   */
-#define CHFL_VOICE      0x0002 /* the power to speak */
-#define CHFL_DEOPPED    0x0004 /* deopped by us, modes need to be bounced */
-#define CHFL_BAN        0x0008 /* ban channel flag */
-#define CHFL_EXCEPTION  0x0010 /* exception to ban channel flag */
-#define CHFL_INVEX      0x0020
+#define CHFL_HALFOP     0x0002 /* Channel half op    */
+#define CHFL_VOICE      0x0004 /* the power to speak */
+#define CHFL_DEOPPED    0x0008 /* deopped by us, modes need to be bounced */
+#define CHFL_BAN        0x0010 /* ban channel flag */
+#define CHFL_EXCEPTION  0x0020 /* exception to ban channel flag */
+#define CHFL_INVEX      0x0040
 
 /* channel modes ONLY */
 #define MODE_PRIVATE    0x0001
@@ -102,5 +103,6 @@
 
 #define CHACCESS_NOTONCHAN  -1
 #define CHACCESS_PEON       0
-#define CHACCESS_CHANOP     1
+#define CHACCESS_HALFOP     1
+#define CHACCESS_CHANOP     2
 #endif /* INCLUDED_channel_mode_h */
diff -ur nohalfops/include/supported.h halfops/include/supported.h
--- nohalfops/include/supported.h	Sun Aug  1 22:38:53 2004
+++ halfops/include/supported.h	Sun Aug  1 22:39:01 2004
@@ -56,7 +56,7 @@
 		  " CALLERID%s"
 
 #define FEATURES2VALUES ConfigChannel.disable_local_channels ? "#" : "#&", \
-                        "(ov)@+", \
+                        "(ohv)@%+", \
                         ConfigChannel.use_except ? "e" : "", \
                         ConfigChannel.use_invex ? "I" : "", \
                         "b,k,l,imnpst", \
diff -ur nohalfops/modules/core/m_join.c halfops/modules/core/m_join.c
--- nohalfops/modules/core/m_join.c	Sun Aug  1 22:38:53 2004
+++ halfops/modules/core/m_join.c	Sun Aug  1 22:39:02 2004
@@ -716,6 +716,7 @@
 remove_our_modes(struct Channel *chptr, struct Client *source_p)
 {
   remove_a_mode(chptr, source_p, CHFL_CHANOP, 'o');
+  remove_a_mode(chptr, source_p, CHFL_HALFOP, 'h');
   remove_a_mode(chptr, source_p, CHFL_VOICE, 'v');
 }
 
diff -ur nohalfops/modules/core/m_kick.c halfops/modules/core/m_kick.c
--- nohalfops/modules/core/m_kick.c	Sun Aug  1 22:38:53 2004
+++ halfops/modules/core/m_kick.c	Sun Aug  1 22:39:02 2004
@@ -135,7 +135,7 @@
         return;
       }
     }
-    if (!has_member_flags(ms, CHFL_CHANOP))
+    if (!has_member_flags(ms, CHFL_CHANOP|CHFL_HALFOP))
     {
       /* was a user, not a server, and user isn't seen as a chanop here */
       if (MyConnect(source_p))
@@ -193,6 +193,17 @@
 
   if ((ms_target = find_channel_link(who, chptr)) != NULL)
   {
+    /* half ops cannot kick other halfops on private channels */
+    if (has_member_flags(ms, CHFL_HALFOP) && !has_member_flags(ms, CHFL_CHANOP))
+    {
+      if (((chptr->mode.mode & MODE_PRIVATE) && has_member_flags(ms_target, CHFL_CHANOP|CHFL_HALFOP)) ||
+            has_member_flags(ms_target, CHFL_CHANOP))
+      {
+        sendto_one(source_p, form_str(ERR_CHANOPRIVSNEEDED),
+                   me.name, source_p->name, name);
+        return;
+      }
+    }
    /* jdc
     * - In the case of a server kicking a user (i.e. CLEARCHAN),
     *   the kick should show up as coming from the server which did
diff -ur nohalfops/modules/core/m_message.c halfops/modules/core/m_message.c
--- nohalfops/modules/core/m_message.c	Sun Aug  1 22:38:53 2004
+++ halfops/modules/core/m_message.c	Sun Aug  1 22:39:02 2004
@@ -342,8 +342,10 @@
     {
       if (*nick == '@')
         type |= CHFL_CHANOP;
+      else if (*nick == '%')
+        type |= CHFL_CHANOP | CHFL_HALFOP;
       else if (*nick == '+')
-        type |= CHFL_CHANOP | CHFL_VOICE;
+        type |= CHFL_CHANOP | CHFL_HALFOP | CHFL_VOICE;
       else
         break;
       nick++;
@@ -367,7 +369,7 @@
       if ((chptr = hash_find_channel(nick)) != NULL)
       {
         if (!has_member_flags(find_channel_link(source_p, chptr),
-                              CHFL_CHANOP|CHFL_VOICE))
+                              CHFL_CHANOP|CHFL_HALFOP|CHFL_VOICE))
         {
           sendto_one(source_p, form_str(ERR_CHANOPRIVSNEEDED),
                      ID_or_name(&me, client_p),
@@ -517,6 +519,11 @@
   {
     type = CHFL_VOICE|CHFL_CHANOP;
     c = '+';
+  }
+  else if (flags & CHFL_HALFOP)
+  {
+    type = CHFL_HALFOP|CHFL_CHANOP;
+    c = '%';
   }
   else
   {
diff -ur nohalfops/modules/core/m_sjoin.c halfops/modules/core/m_sjoin.c
--- nohalfops/modules/core/m_sjoin.c	Sun Aug  1 22:38:53 2004
+++ halfops/modules/core/m_sjoin.c	Sun Aug  1 22:39:02 2004
@@ -317,7 +317,7 @@
     fl = 0;
     num_prefix = 0;
 
-    for (i = 0; i < 2; i++)
+    for (i = 0; i < 3; i++)
     {
       if (*s == '@')
       {
@@ -329,6 +329,11 @@
         fl |= CHFL_VOICE;
         s++;
       }
+      else if (*s == '%')
+      {
+        fl |= CHFL_HALFOP;
+        s++;
+      }
     }
 
     target_p = find_person(s);
@@ -353,6 +358,11 @@
         *nick_ptr++ = '@';
         *uid_ptr++  = '@';
       }
+      if (fl & CHFL_HALFOP)
+      {
+        *nick_ptr++ = '%';
+        *uid_ptr++  = '%';
+      }
       if (fl & CHFL_VOICE)
       {
         *nick_ptr++ = '+';
@@ -366,7 +376,7 @@
 
     if (!keep_new_modes)
     {
-      if (fl & CHFL_CHANOP)
+      if (fl & (CHFL_CHANOP|CHFL_HALFOP))
         fl = CHFL_DEOPPED;
       else
         fl = 0;
@@ -469,6 +479,30 @@
         pargs = 0;
       }
     }
+    if (fl & CHFL_HALFOP)
+    {
+      *mbuf++ = 'h';
+      para[pargs++] = target_p->name;
+
+      if (pargs >= MAXMODEPARAMS)
+      {
+        sptr = sendbuf;
+        *mbuf = '\0';
+        for(lcount = 0; lcount < MAXMODEPARAMS; lcount++)
+        {
+          slen = ircsprintf(sptr, " %s", para[lcount]);
+          sptr += slen;
+        }
+        sendto_channel_local(ALL_MEMBERS, chptr, ":%s MODE %s %s%s",
+                             servername, chptr->chname, modebuf, sendbuf);
+
+        mbuf = modebuf;
+        *mbuf++ = '+';
+
+        sendbuf[0] = '\0';
+        pargs = 0;
+      }
+    }
 
 nextnick:
     /* p points to the next nick */
@@ -681,6 +715,7 @@
 remove_our_modes(struct Channel *chptr, struct Client *source_p)
 {
   remove_a_mode(chptr, source_p, CHFL_CHANOP, 'o');
+  remove_a_mode(chptr, source_p, CHFL_HALFOP, 'h');
   remove_a_mode(chptr, source_p, CHFL_VOICE, 'v');
 }
 
diff -ur nohalfops/modules/m_invite.c halfops/modules/m_invite.c
--- nohalfops/modules/m_invite.c	Sun Aug  1 22:38:53 2004
+++ halfops/modules/m_invite.c	Sun Aug  1 22:39:02 2004
@@ -208,13 +208,13 @@
                   me.name, source_p->name, target_p->name, chptr->chname);
 
     /* XXX This possibly should be a numeric -db */
-    sendto_channel_local(CHFL_CHANOP, chptr,
+    sendto_channel_local(CHFL_CHANOP|CHFL_HALFOP, chptr,
                          ":%s NOTICE %s :%s is inviting %s to %s.",
 			 me.name, chptr->chname, source_p->name,
 			 target_p->name, chptr->chname);
 
     /* Send a notice to servers that don't support CAP_PARA */
-    sendto_channel_remote(source_p, client_p, CHFL_CHANOP,
+    sendto_channel_remote(source_p, client_p, CHFL_CHANOP|CHFL_HALFOP,
 			  NOCAPS, CAP_PARA, chptr,
 			  ":%s NOTICE %s :%s is inviting %s to %s.",
 			  source_p->name, chptr->chname, source_p->name,
@@ -329,13 +329,13 @@
 		    target_p->name, chptr->chname);
 
       /* XXX This possibly should be a numeric -db */
-      sendto_channel_local(CHFL_CHANOP, chptr,
+      sendto_channel_local(CHFL_CHANOP|CHFL_HALFOP, chptr,
 			   ":%s NOTICE %s :%s is inviting %s to %s.",
 			   me.name, chptr->chname, source_client_p->name,
 			   target_p->name, chptr->chname);
 
       /* Send a notice to servers that don't support CAP_PARA */
-      sendto_channel_remote(source_p, client_p, CHFL_CHANOP,
+      sendto_channel_remote(source_p, client_p, CHFL_CHANOP|CHFL_HALFOP,
 			    NOCAPS, CAP_PARA, chptr,
 			    ":%s NOTICE %s :%s is inviting %s to %s.",
 			    source_client_p->name, chptr->chname,
diff -ur nohalfops/modules/m_knock.c halfops/modules/m_knock.c
--- nohalfops/modules/m_knock.c	Sun Aug  1 22:38:53 2004
+++ halfops/modules/m_knock.c	Sun Aug  1 22:39:02 2004
@@ -353,7 +353,7 @@
   if (source_p->user != NULL)
   {
       if (ConfigChannel.use_knock)
-        sendto_channel_local(CHFL_CHANOP,
+        sendto_channel_local(CHFL_CHANOP|CHFL_HALFOP,
   			     chptr, form_str(RPL_KNOCK),
 			     me.name, name, name,
 			     source_p->name, source_p->username,
diff -ur nohalfops/modules/m_topic.c halfops/modules/m_topic.c
--- nohalfops/modules/m_topic.c	Sun Aug  1 22:38:53 2004
+++ halfops/modules/m_topic.c	Sun Aug  1 22:39:02 2004
@@ -135,7 +135,7 @@
         return;
       }
       if ((chptr->mode.mode & MODE_TOPICLIMIT) == 0 ||
-          has_member_flags(ms, CHFL_CHANOP))
+          has_member_flags(ms, CHFL_CHANOP|CHFL_HALFOP))
       {
         char topic_info[USERHOST_REPLYLEN]; 
         ircsprintf(topic_info, "%s!%s@%s",
diff -ur nohalfops/src/channel.c halfops/src/channel.c
--- nohalfops/src/channel.c	Sun Aug  1 22:38:53 2004
+++ halfops/src/channel.c	Sun Aug  1 22:39:02 2004
@@ -170,6 +170,8 @@
     tlen = strlen(ms->client_p->name) + 1;  /* nick + space */
     if (ms->flags & CHFL_CHANOP)
       tlen++;
+    if (ms->flags & CHFL_HALFOP)
+      tlen++;
     if (ms->flags & CHFL_VOICE)
       tlen++;
 
@@ -433,7 +435,7 @@
         continue;
 
       tlen = strlen(target_p->name) + 1;  /* nick + space */
-      if (ms->flags & (CHFL_CHANOP | CHFL_VOICE))
+      if (ms->flags & (CHFL_CHANOP | CHFL_HALFOP | CHFL_VOICE))
         tlen++;
       if (t + tlen - lbuf > IRCD_BUFSIZE)
       {
@@ -562,6 +564,13 @@
     *p++ = '@';
   }
 
+  if (ms->flags & CHFL_HALFOP)
+  {
+    if (!combine)
+      return "%";
+    *p++ = '%';
+  }
+
   if (ms->flags & CHFL_VOICE)
     *p++ = '+';
   *p = '\0';
@@ -755,7 +764,7 @@
 
   ms = find_channel_link(source_p, chptr);
 
-  if ((ms != NULL) && ms->flags & (CHFL_CHANOP|CHFL_VOICE))
+  if ((ms != NULL) && ms->flags & (CHFL_CHANOP|CHFL_HALFOP|CHFL_VOICE))
      return(CAN_SEND_OPV);
 
   if (chptr->mode.mode & MODE_MODERATED)
@@ -777,7 +786,7 @@
 can_send_part(struct Membership *member, struct Channel *chptr,
               struct Client *source_p)
 {
-  if (has_member_flags(member, CHFL_CHANOP))
+  if (has_member_flags(member, CHFL_CHANOP|CHFL_HALFOP))
     return(CAN_SEND_OPV);
 
   if (chptr->mode.mode & MODE_MODERATED)
diff -ur nohalfops/src/channel_mode.c halfops/src/channel_mode.c
--- nohalfops/src/channel_mode.c	Sun Aug  1 22:38:53 2004
+++ halfops/src/channel_mode.c	Sun Aug  1 22:39:02 2004
@@ -72,6 +72,10 @@
 static void chm_op(struct Client *, struct Client *, struct Channel *, int,
                    int *, char **, int *, int, int, char, void *,
                    const char *chname);
+static void chm_hop(struct Client *, struct Client *, struct Channel *, int,
+                   int *, char **, int *, int, int, char, void *,
+                   const char *chname);
+
 static void chm_voice(struct Client *, struct Client *, struct Channel *,
                       int, int *, char **, int *, int, int, char, void *,
                       const char *chname);
@@ -639,7 +643,11 @@
 
   mode_type = (long)d;
 
-  if (alev < CHACCESS_CHANOP)
+  /* dont allow halfops to set +-p, as this controls whether they can set
+   * +-h or not.. all other simple modes are ok   
+   */ 
+  if ((alev < CHACCESS_HALFOP) ||
+      ((mode_type == MODE_PRIVATE) && (alev < CHACCESS_CHANOP)))
   {
     if (!(*errors & SM_ERR_NOOPS))
       sendto_one(source_p, form_str(alev == CHACCESS_NOTONCHAN ?
@@ -720,7 +728,7 @@
     return;
   }
 
-  if (alev < CHACCESS_CHANOP)
+  if (alev < CHACCESS_HALFOP)
   {
     if (!(*errors & SM_ERR_NOOPS))
       sendto_one(source_p, form_str(alev == CHACCESS_NOTONCHAN ?
@@ -814,7 +822,7 @@
     return;
   }
 
-  if (alev < CHACCESS_CHANOP)
+  if (alev < CHACCESS_HALFOP)
   {
     if (!(*errors & SM_ERR_NOOPS))
       sendto_one(source_p, form_str(alev == CHACCESS_NOTONCHAN ?
@@ -917,7 +925,7 @@
     return;
   }
 
-  if (alev < CHACCESS_CHANOP)
+  if (alev < CHACCESS_HALFOP)
   {
     if (!(*errors & SM_ERR_NOOPS))
       sendto_one(source_p, form_str(alev == CHACCESS_NOTONCHAN ?
@@ -1078,6 +1086,95 @@
 }
 
 static void
+chm_hop(struct Client *client_p, struct Client *source_p,
+       struct Channel *chptr, int parc, int *parn,
+       char **parv, int *errors, int alev, int dir, char c, void *d,
+       const char *chname)
+{
+  char *opnick;
+  struct Client *targ_p;
+  struct Membership *member;
+
+  /* *sigh* - dont allow halfops to set +/-h, they could fully control a
+   * channel if there were no ops - it doesnt solve anything.. MODE_PRIVATE
+   * when used with MODE_SECRET is paranoid - cant use +p
+   *
+   * it needs to be optional per channel - but not via +p, that or remove
+   * paranoid.. -- fl_
+   *
+   * +p means paranoid, it is useless for anything else on modern IRC, as
+   * list isn't really usable. If you want to have a private channel these
+   * days, you set it +s. Halfops can no longer remove simple modes when
+   * +p is set (although they can set +p) so it is safe to use this to
+   * control whether they can (de)halfop...
+   */
+  if (alev <
+      ((chptr->mode.mode & MODE_PRIVATE) ? CHACCESS_CHANOP : CHACCESS_HALFOP))
+  {
+    if (!(*errors & SM_ERR_NOOPS))
+      sendto_one(source_p, form_str(alev == CHACCESS_NOTONCHAN ?
+                                    ERR_NOTONCHANNEL : ERR_CHANOPRIVSNEEDED),
+                 me.name, source_p->name, chname); 
+    *errors |= SM_ERR_NOOPS;
+    return;
+  }
+  if ((dir == MODE_QUERY) || (parc <= *parn))
+    return;
+
+  if (IsRestricted(source_p) && (dir == MODE_ADD))
+  {
+    if (!(*errors & SM_ERR_RESTRICTED))
+      sendto_one(source_p,
+                 ":%s NOTICE %s :*** Notice -- You are restricted and cannot "
+                 "chanop others", me.name, source_p->name);
+
+    *errors |= SM_ERR_RESTRICTED;
+    return;
+  }
+
+  opnick = parv[(*parn)++];
+
+  if ((targ_p = find_chasing(source_p, opnick, NULL)) == NULL)
+    return;
+  if (!IsClient(targ_p))
+    return;
+
+  if ((member = find_channel_link(targ_p, chptr)) == NULL)
+  {
+    if (!(*errors & SM_ERR_NOTONCHANNEL))
+      sendto_one(source_p, form_str(ERR_USERNOTINCHANNEL),
+                 me.name, source_p->name, opnick, chname);
+    *errors |= SM_ERR_NOTONCHANNEL;
+    return;
+  }
+
+  if (MyClient(source_p) && (++mode_limit > MAXMODEPARAMS))
+    return;
+
+  /* no redundant mode changes */
+  if (dir == MODE_ADD &&  has_member_flags(member, CHFL_HALFOP))
+    return;
+  if (dir == MODE_DEL && !has_member_flags(member, CHFL_HALFOP))
+    return;
+
+  mode_changes[mode_count].letter = 'h';
+  mode_changes[mode_count].dir = dir;
+  mode_changes[mode_count].caps = 0;
+  mode_changes[mode_count].nocaps = 0;
+  mode_changes[mode_count].mems = ALL_MEMBERS;
+  mode_changes[mode_count].id = targ_p->id;
+  mode_changes[mode_count].arg = targ_p->name;
+  mode_changes[mode_count++].client = targ_p;
+
+  if (dir == MODE_ADD)
+  {
+    AddMemberFlag(member, CHFL_HALFOP);
+    DelMemberFlag(member, CHFL_DEOPPED);
+  }
+  else DelMemberFlag(member, CHFL_HALFOP);
+}
+
+static void
 chm_voice(struct Client *client_p, struct Client *source_p,
           struct Channel *chptr, int parc, int *parn,
           char **parv, int *errors, int alev, int dir, char c, void *d,
@@ -1087,7 +1184,7 @@
   struct Client *targ_p;
   struct Membership *member;
 
-  if (alev < CHACCESS_CHANOP)
+  if (alev < CHACCESS_HALFOP)
   {
     if (!(*errors & SM_ERR_NOOPS))
       sendto_one(source_p, form_str(alev == CHACCESS_NOTONCHAN ?
@@ -1149,7 +1246,7 @@
   int i, limit;
   char *lstr;
 
-  if (alev < CHACCESS_CHANOP)
+  if (alev < CHACCESS_HALFOP)
   {
     if (!(*errors & SM_ERR_NOOPS))
       sendto_one(source_p, form_str(alev == CHACCESS_NOTONCHAN ?
@@ -1214,7 +1311,7 @@
   int i;
   char *key;
 
-  if (alev < CHACCESS_CHANOP)
+  if (alev < CHACCESS_HALFOP)
   {
     if (!(*errors & SM_ERR_NOOPS))
       sendto_one(source_p, form_str(alev == CHACCESS_NOTONCHAN ?
@@ -1329,7 +1426,7 @@
   {chm_except, NULL},                             /* e */
   {chm_nosuch, NULL},                             /* f */
   {chm_nosuch, NULL},                             /* g */
-  {chm_nosuch, NULL},				  /* h */
+  {chm_hop, NULL},                                /* h */
   {chm_simple, (void *) MODE_INVITEONLY},         /* i */
   {chm_nosuch, NULL},                             /* j */
   {chm_key, NULL},                                /* k */
@@ -1374,6 +1471,9 @@
 
   if (has_member_flags(member, CHFL_CHANOP))
     return(CHACCESS_CHANOP);
+
+  if (has_member_flags(member, CHFL_HALFOP))
+    return(CHACCESS_HALFOP);
 
   return(CHACCESS_PEON);
 }
diff -ur nohalfops/src/messages.tab halfops/src/messages.tab
--- nohalfops/src/messages.tab	Sun Aug  1 22:38:53 2004
+++ halfops/src/messages.tab	Sun Aug  1 22:39:02 2004
@@ -24,7 +24,7 @@
 /* 001 */  {"RPL_WELCOME", ":%s 001 %s :Welcome to the %s Internet Relay Chat Network %s", NULL},
 /* 002 */  {"RPL_YOURHOST", ":%s 002 %s :Your host is %s, running version %s", NULL},
 /* 003 */  {"RPL_CREATED", ":%s 003 %s :This server was created %s", NULL},
-/* 004 */  {"RPL_MYINFO", ":%s 004 %s %s %s oiwszcerkfydnxbaugl biklmnopstveI bkloveI", NULL},
+/* 004 */  {"RPL_MYINFO", ":%s 004 %s %s %s oiwszcerkfydnxbaugl biklmnopstveIh bkloveIh", NULL},
 /* 005 */  {"RPL_ISUPPORT", ":%s 005 %s %s :are supported by this server", NULL},
 /* 006 */  {NULL, NULL, NULL},
 /* 007 */  {NULL, NULL, NULL},
